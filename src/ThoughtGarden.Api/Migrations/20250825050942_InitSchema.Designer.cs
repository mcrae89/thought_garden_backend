// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThoughtGarden.Api.Data;

#nullable disable

namespace ThoughtGarden.Api.Migrations
{
    [DbContext(typeof(ThoughtGardenDbContext))]
    [Migration("20250825050942_InitSchema")]
    partial class InitSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ThoughtGarden.Models.EmotionTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmotionTags");
                });

            modelBuilder.Entity("ThoughtGarden.Models.EntryEmotion", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnType("integer");

                    b.Property<int>("EmotionId")
                        .HasColumnType("integer");

                    b.Property<int?>("Intensity")
                        .HasColumnType("integer");

                    b.HasKey("EntryId", "EmotionId");

                    b.HasIndex("EmotionId");

                    b.ToTable("EntryEmotions");
                });

            modelBuilder.Entity("ThoughtGarden.Models.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Mood")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("ThoughtGarden.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ThoughtGarden.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EncryptionLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Reminders")
                        .HasColumnType("boolean");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ThoughtGarden.Models.EntryEmotion", b =>
                {
                    b.HasOne("ThoughtGarden.Models.EmotionTag", "Emotion")
                        .WithMany("Entries")
                        .HasForeignKey("EmotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThoughtGarden.Models.JournalEntry", "Entry")
                        .WithMany("Emotions")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emotion");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("ThoughtGarden.Models.JournalEntry", b =>
                {
                    b.HasOne("ThoughtGarden.Models.User", "User")
                        .WithMany("Entries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThoughtGarden.Models.UserSettings", b =>
                {
                    b.HasOne("ThoughtGarden.Models.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("ThoughtGarden.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThoughtGarden.Models.EmotionTag", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("ThoughtGarden.Models.JournalEntry", b =>
                {
                    b.Navigation("Emotions");
                });

            modelBuilder.Entity("ThoughtGarden.Models.User", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
