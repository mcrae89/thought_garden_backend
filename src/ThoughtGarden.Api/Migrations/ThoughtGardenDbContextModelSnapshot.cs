// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThoughtGarden.Api.Data;

#nullable disable

namespace ThoughtGarden.Api.Migrations
{
    [DbContext(typeof(ThoughtGardenDbContext))]
    partial class ThoughtGardenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PlantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EmotionTagId")
                        .HasColumnType("integer")
                        .HasColumnName("emotion_tag_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_plant_types");

                    b.HasIndex("EmotionTagId")
                        .HasDatabaseName("ix_plant_types_emotion_tag_id");

                    b.ToTable("plant_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmotionTagId = 1,
                            Name = "Sunflower"
                        },
                        new
                        {
                            Id = 2,
                            EmotionTagId = 2,
                            Name = "Willow"
                        },
                        new
                        {
                            Id = 3,
                            EmotionTagId = 3,
                            Name = "Cactus"
                        },
                        new
                        {
                            Id = 4,
                            EmotionTagId = 4,
                            Name = "Lotus"
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.EmotionTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_emotion_tags");

                    b.ToTable("emotion_tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#FFD700",
                            Icon = "😊",
                            Name = "Happy"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#1E90FF",
                            Icon = "😢",
                            Name = "Sad"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#FF4500",
                            Icon = "😡",
                            Name = "Angry"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#32CD32",
                            Icon = "😌",
                            Name = "Calm"
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.EntryEmotion", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnType("integer")
                        .HasColumnName("entry_id");

                    b.Property<int>("EmotionId")
                        .HasColumnType("integer")
                        .HasColumnName("emotion_id");

                    b.Property<int?>("Intensity")
                        .HasColumnType("integer")
                        .HasColumnName("intensity");

                    b.HasKey("EntryId", "EmotionId")
                        .HasName("pk_entry_emotions");

                    b.HasIndex("EmotionId")
                        .HasDatabaseName("ix_entry_emotions_emotion_id");

                    b.ToTable("entry_emotions", (string)null);

                    b.HasData(
                        new
                        {
                            EntryId = 1,
                            EmotionId = 4,
                            Intensity = 5
                        },
                        new
                        {
                            EntryId = 2,
                            EmotionId = 2,
                            Intensity = 3
                        },
                        new
                        {
                            EntryId = 3,
                            EmotionId = 3,
                            Intensity = 2
                        },
                        new
                        {
                            EntryId = 4,
                            EmotionId = 1,
                            Intensity = 4
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.GardenPlant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("GardenStateId")
                        .HasColumnType("integer")
                        .HasColumnName("garden_state_id");

                    b.Property<double>("GrowthProgress")
                        .HasColumnType("double precision")
                        .HasColumnName("growth_progress");

                    b.Property<bool>("IsStored")
                        .HasColumnType("boolean")
                        .HasColumnName("is_stored");

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<int>("PlantTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_type_id");

                    b.Property<int>("Stage")
                        .HasColumnType("integer")
                        .HasColumnName("stage");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_garden_plants");

                    b.HasIndex("GardenStateId")
                        .HasDatabaseName("ix_garden_plants_garden_state_id");

                    b.HasIndex("PlantTypeId")
                        .HasDatabaseName("ix_garden_plants_plant_type_id");

                    b.ToTable("garden_plants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            GardenStateId = 1,
                            GrowthProgress = 0.80000000000000004,
                            IsStored = true,
                            PlantTypeId = 1,
                            Stage = 2,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            GardenStateId = 1,
                            GrowthProgress = 0.20000000000000001,
                            IsStored = false,
                            Order = 1,
                            PlantTypeId = 3,
                            Stage = 0,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            GardenStateId = 2,
                            GrowthProgress = 0.5,
                            IsStored = false,
                            Order = 2,
                            PlantTypeId = 2,
                            Stage = 1,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            GardenStateId = 2,
                            GrowthProgress = 1.0,
                            IsStored = true,
                            PlantTypeId = 4,
                            Stage = 3,
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.GardenState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<DateTime>("SnapshotAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("snapshot_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_garden_states");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_garden_states_user_id");

                    b.ToTable("garden_states", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Size = 5,
                            SnapshotAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Size = 5,
                            SnapshotAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int?>("MoodId")
                        .HasColumnType("integer")
                        .HasColumnName("mood_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_journal_entries");

                    b.HasIndex("MoodId")
                        .HasDatabaseName("ix_journal_entries_mood_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_journal_entries_user_id");

                    b.ToTable("journal_entries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            MoodId = 1,
                            Text = "Feeling happy and accomplished today.",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            MoodId = 3,
                            Text = "Got frustrated with a bug, but resolved it.",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            MoodId = 2,
                            Text = "Sad about the weather, it's been gloomy.",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            MoodId = 4,
                            Text = "Went for a walk and felt calm afterward.",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingPeriod")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("billing_period");

                    b.Property<int>("MaxGardenCustomizationsPerDay")
                        .HasColumnType("integer")
                        .HasColumnName("max_garden_customizations_per_day");

                    b.Property<int>("MaxJournalEntriesPerDay")
                        .HasColumnType("integer")
                        .HasColumnName("max_journal_entries_per_day");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_subscription_plan");

                    b.ToTable("subscription_plan", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingPeriod = "Monthly",
                            MaxGardenCustomizationsPerDay = 2,
                            MaxJournalEntriesPerDay = 3,
                            Name = "Free",
                            Price = 0.00m
                        },
                        new
                        {
                            Id = 2,
                            BillingPeriod = "Monthly",
                            MaxGardenCustomizationsPerDay = 2147483647,
                            MaxJournalEntriesPerDay = 2147483647,
                            Name = "Pro",
                            Price = 9.99m
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_plan_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("SubscriptionPlanId")
                        .HasDatabaseName("ix_users_subscription_plan_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            PasswordHash = "$2a$11$bMbVvslv1w8ctmZB9XJJl.EZHIHgshLMc8zGmryaeKOH2nx/iDFZy",
                            Role = 1,
                            SubscriptionPlanId = 2,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@example.com",
                            PasswordHash = "$2a$11$FVx.eRjAlmsDfYXTGklNEuXbP3o4Gb45QVkTop/yK0xo5PkUNHLH6",
                            Role = 0,
                            SubscriptionPlanId = 1,
                            UserName = "regular"
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EncryptionLevel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("encryption_level");

                    b.Property<bool>("Reminders")
                        .HasColumnType("boolean")
                        .HasColumnName("reminders");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("theme");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_settings");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_settings_user_id");

                    b.ToTable("user_settings", (string)null);
                });

            modelBuilder.Entity("PlantType", b =>
                {
                    b.HasOne("ThoughtGarden.Models.EmotionTag", "EmotionTag")
                        .WithMany()
                        .HasForeignKey("EmotionTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plant_types_emotion_tags_emotion_tag_id");

                    b.Navigation("EmotionTag");
                });

            modelBuilder.Entity("ThoughtGarden.Models.EntryEmotion", b =>
                {
                    b.HasOne("ThoughtGarden.Models.EmotionTag", "Emotion")
                        .WithMany("EntryLinks")
                        .HasForeignKey("EmotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entry_emotions_emotion_tags_emotion_id");

                    b.HasOne("ThoughtGarden.Models.JournalEntry", "Entry")
                        .WithMany("SecondaryEmotions")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_entry_emotions_journal_entries_entry_id");

                    b.Navigation("Emotion");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("ThoughtGarden.Models.GardenPlant", b =>
                {
                    b.HasOne("ThoughtGarden.Models.GardenState", "GardenState")
                        .WithMany("Plants")
                        .HasForeignKey("GardenStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_garden_plants_garden_states_garden_state_id");

                    b.HasOne("PlantType", "PlantType")
                        .WithMany("GardenPlants")
                        .HasForeignKey("PlantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_garden_plants_plant_types_plant_type_id");

                    b.Navigation("GardenState");

                    b.Navigation("PlantType");
                });

            modelBuilder.Entity("ThoughtGarden.Models.GardenState", b =>
                {
                    b.HasOne("ThoughtGarden.Models.User", "User")
                        .WithMany("GardenStates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_garden_states_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThoughtGarden.Models.JournalEntry", b =>
                {
                    b.HasOne("ThoughtGarden.Models.EmotionTag", "Mood")
                        .WithMany()
                        .HasForeignKey("MoodId")
                        .HasConstraintName("fk_journal_entries_emotion_tags_mood_id");

                    b.HasOne("ThoughtGarden.Models.User", "User")
                        .WithMany("JournalEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_journal_entries_users_user_id");

                    b.Navigation("Mood");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThoughtGarden.Models.User", b =>
                {
                    b.HasOne("ThoughtGarden.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("Users")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_subscription_plan_subscription_plan_id");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("ThoughtGarden.Models.UserSettings", b =>
                {
                    b.HasOne("ThoughtGarden.Models.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("ThoughtGarden.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_settings_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PlantType", b =>
                {
                    b.Navigation("GardenPlants");
                });

            modelBuilder.Entity("ThoughtGarden.Models.EmotionTag", b =>
                {
                    b.Navigation("EntryLinks");
                });

            modelBuilder.Entity("ThoughtGarden.Models.GardenState", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("ThoughtGarden.Models.JournalEntry", b =>
                {
                    b.Navigation("SecondaryEmotions");
                });

            modelBuilder.Entity("ThoughtGarden.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ThoughtGarden.Models.User", b =>
                {
                    b.Navigation("GardenStates");

                    b.Navigation("JournalEntries");

                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
