// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ThoughtGarden.Api.Data;

#nullable disable

namespace ThoughtGarden.Api.Migrations
{
    [DbContext(typeof(ThoughtGardenDbContext))]
    [Migration("20250825181022_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ThoughtGarden.Models.EmotionTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmotionTags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#FFD700",
                            Icon = "😊",
                            Name = "Happy"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#1E90FF",
                            Icon = "😢",
                            Name = "Sad"
                        },
                        new
                        {
                            Id = 3,
                            Color = "#FF4500",
                            Icon = "😡",
                            Name = "Angry"
                        },
                        new
                        {
                            Id = 4,
                            Color = "#32CD32",
                            Icon = "😌",
                            Name = "Calm"
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.EntryEmotion", b =>
                {
                    b.Property<int>("EntryId")
                        .HasColumnType("integer");

                    b.Property<int>("EmotionId")
                        .HasColumnType("integer");

                    b.Property<int?>("Intensity")
                        .HasColumnType("integer");

                    b.HasKey("EntryId", "EmotionId");

                    b.HasIndex("EmotionId");

                    b.ToTable("EntryEmotions");

                    b.HasData(
                        new
                        {
                            EntryId = 1,
                            EmotionId = 1,
                            Intensity = 8
                        },
                        new
                        {
                            EntryId = 2,
                            EmotionId = 3,
                            Intensity = 6
                        },
                        new
                        {
                            EntryId = 3,
                            EmotionId = 2,
                            Intensity = 7
                        },
                        new
                        {
                            EntryId = 4,
                            EmotionId = 4,
                            Intensity = 9
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.GardenState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("SnapshotAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GardenStates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SnapshotAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            SnapshotAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Mood")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("JournalEntries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Mood = "Happy",
                            Text = "Feeling happy and accomplished today.",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Mood = "Angry",
                            Text = "Got frustrated with a bug, but resolved it.",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Mood = "Sad",
                            Text = "Sad about the weather, it's been gloomy.",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            Mood = "Calm",
                            Text = "Went for a walk and felt calm afterward.",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EmotionTagId")
                        .HasColumnType("integer");

                    b.Property<int>("GardenStateId")
                        .HasColumnType("integer");

                    b.Property<double>("GrowthProgress")
                        .HasColumnType("double precision");

                    b.Property<int>("GrowthStage")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmotionTagId");

                    b.HasIndex("GardenStateId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmotionTagId = 1,
                            GardenStateId = 1,
                            GrowthProgress = 0.80000000000000004,
                            GrowthStage = 2,
                            Name = "Sunflower",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmotionTagId = 3,
                            GardenStateId = 1,
                            GrowthProgress = 0.20000000000000001,
                            GrowthStage = 0,
                            Name = "Cactus",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmotionTagId = 2,
                            GardenStateId = 2,
                            GrowthProgress = 0.5,
                            GrowthStage = 1,
                            Name = "Willow",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EmotionTagId = 4,
                            GardenStateId = 2,
                            GrowthProgress = 1.0,
                            GrowthStage = 3,
                            Name = "Lotus",
                            UpdatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            PasswordHash = "hashedpassword1",
                            Role = 1,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Email = "user@example.com",
                            PasswordHash = "hashedpassword2",
                            Role = 0,
                            UserName = "regular"
                        });
                });

            modelBuilder.Entity("ThoughtGarden.Models.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EncryptionLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Reminders")
                        .HasColumnType("boolean");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("ThoughtGarden.Models.EntryEmotion", b =>
                {
                    b.HasOne("ThoughtGarden.Models.EmotionTag", "Emotion")
                        .WithMany("Entries")
                        .HasForeignKey("EmotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThoughtGarden.Models.JournalEntry", "Entry")
                        .WithMany("Emotions")
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emotion");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("ThoughtGarden.Models.GardenState", b =>
                {
                    b.HasOne("ThoughtGarden.Models.User", "User")
                        .WithMany("GardenStates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThoughtGarden.Models.JournalEntry", b =>
                {
                    b.HasOne("ThoughtGarden.Models.User", "User")
                        .WithMany("JournalEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThoughtGarden.Models.Plant", b =>
                {
                    b.HasOne("ThoughtGarden.Models.EmotionTag", "EmotionTag")
                        .WithMany()
                        .HasForeignKey("EmotionTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThoughtGarden.Models.GardenState", "GardenState")
                        .WithMany("Plants")
                        .HasForeignKey("GardenStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmotionTag");

                    b.Navigation("GardenState");
                });

            modelBuilder.Entity("ThoughtGarden.Models.UserSettings", b =>
                {
                    b.HasOne("ThoughtGarden.Models.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("ThoughtGarden.Models.UserSettings", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThoughtGarden.Models.EmotionTag", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("ThoughtGarden.Models.GardenState", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("ThoughtGarden.Models.JournalEntry", b =>
                {
                    b.Navigation("Emotions");
                });

            modelBuilder.Entity("ThoughtGarden.Models.User", b =>
                {
                    b.Navigation("GardenStates");

                    b.Navigation("JournalEntries");

                    b.Navigation("Settings");
                });
#pragma warning restore 612, 618
        }
    }
}
